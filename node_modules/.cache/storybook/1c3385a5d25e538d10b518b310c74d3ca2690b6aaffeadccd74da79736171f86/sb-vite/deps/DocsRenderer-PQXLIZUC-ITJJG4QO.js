import {
  renderElement,
  unmountElement
} from "./chunk-II45WP6N.js";
import {
  AnchorMdx,
  CodeOrSourceMdx,
  Docs,
  HeadersMdx
} from "./chunk-RE6ZR2WW.js";
import "./chunk-W5Q23FPN.js";
import "./chunk-2HXHLLKL.js";
import "./chunk-F4RSSROR.js";
import "./chunk-UIISBVAW.js";
import "./chunk-LGCSI5EO.js";
import "./chunk-QFCKH4KW.js";
import "./chunk-QL2FNL6X.js";
import {
  Rn
} from "./chunk-PXOP3IVQ.js";
import "./chunk-EIG2BDWJ.js";
import "./chunk-7LJ2A7BE.js";
import "./chunk-EA2IITB3.js";
import "./chunk-JLBFQ2EK.js";
import {
  x
} from "./chunk-VBHGAG3O.js";
import "./chunk-PR4QN5HX.js";

// node_modules/@storybook/addon-docs/dist/DocsRenderer-PQXLIZUC.mjs
var defaultComponents = { code: CodeOrSourceMdx, a: AnchorMdx, ...HeadersMdx };
var ErrorBoundary = class extends x {
  constructor() {
    super(...arguments);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError() {
    return { hasError: true };
  }
  componentDidCatch(err) {
    let { showException } = this.props;
    showException(err);
  }
  render() {
    let { hasError } = this.state, { children } = this.props;
    return hasError ? null : Rn.createElement(Rn.Fragment, null, children);
  }
};
var DocsRenderer = class {
  constructor() {
    this.render = async (context, docsParameter, element) => {
      let components = { ...defaultComponents, ...docsParameter?.components }, TDocs = Docs;
      return new Promise((resolve, reject) => {
        import("./@mdx-js_react.js").then(({ MDXProvider }) => renderElement(Rn.createElement(ErrorBoundary, { showException: reject, key: Math.random() }, Rn.createElement(MDXProvider, { components }, Rn.createElement(TDocs, { context, docsParameter }))), element)).then(() => resolve());
      });
    }, this.unmount = (element) => {
      unmountElement(element);
    };
  }
};
export {
  DocsRenderer,
  defaultComponents
};
//# sourceMappingURL=DocsRenderer-PQXLIZUC-ITJJG4QO.js.map
