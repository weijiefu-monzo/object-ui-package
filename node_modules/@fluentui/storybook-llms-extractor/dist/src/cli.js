"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _nodepath = require("node:path");
const _nodeprocess = require("node:process");
const _yargs = /*#__PURE__*/ _interop_require_default._(require("yargs"));
const _utils = require("./utils");
main().catch((reason)=>{
    console.error(reason);
    process.exit(1);
});
async function main() {
    console.log(`━━ Storybook LLM Docs Generator ━━`);
    const args = await processArgs();
    console.log(`ℹ️ Storybook dist path: ${args.distPath}`);
    const data = await (0, _utils.extractStorybookData)(args);
    // Write summary/llms.txt file
    await (0, _utils.writeSummaryFile)(args, data);
    // Write per component/page files
    await (0, _utils.writeFullDocsFiles)(args, data);
    console.log(`✅ LLMs docs generation complete.`);
    console.log(`ℹ️ You can find the generated files in the Storybook dist folder: ${args.distPath}`);
}
/**
 * Type guard for StorybookRef
 */ function isStorybookRef(obj) {
    return !!obj && typeof obj === 'object' && 'title' in obj && typeof obj.title === 'string' && 'url' in obj && typeof obj.url === 'string';
}
/**
 * Parses refs from CLI arguments.
 */ function parseRefs(refs) {
    if (Array.isArray(refs)) {
        return refs.map((ref)=>{
            if (typeof ref === 'string') {
                try {
                    return JSON.parse(ref);
                } catch  {
                    return null;
                }
            }
            return ref;
        }).filter(isStorybookRef);
    }
    return [];
}
/**
 * Processes CLI arguments for `distPath`, `refs`, and other options.
 *
 * Users are encouraged to provide a yargs-compatible config file (e.g., llms.config.js)
 * that exports all needed options, including a normalized refs array if desired.
 */ async function processArgs() {
    const argv = await (0, _yargs.default)(process.argv).usage('CLI to generate LLMs docs for Storybook docs').option('distPath', {
        type: 'string',
        demandOption: true,
        describe: 'Relative path to the Storybook distribution folder'
    }).option('summaryBaseUrl', {
        type: 'string',
        default: '/',
        describe: 'Base URL for the Storybook docs'
    }).option('summaryTitle', {
        type: 'string',
        default: 'Summary',
        describe: 'Title for the summary file'
    }).option('summaryDescription', {
        type: 'string',
        default: '',
        describe: 'Description for the summary file'
    }).option('refs', {
        type: 'array',
        default: [],
        describe: 'Array of composed Storybook refs (objects with id, title, url)'
    }).config().alias('h', 'help').version(false).argv;
    return {
        ...argv,
        distPath: (0, _nodepath.join)((0, _nodeprocess.cwd)(), argv.distPath),
        refs: parseRefs(argv.refs)
    };
}

//# sourceMappingURL=cli.js.map